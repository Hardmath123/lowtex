@require demo.js

@set width 80
@set align center

@begin underline
The LowTeX Manual
@end underline

By Hardmath123

@vspace

@set indent on
@set align left

LowTeX--pronounced "low-tech"--is a small text transformation package that generates pretty monospace outputs, specifically for READMEs, licenses, or even large block comments. This documentation was generated by LowTeX, and its source is bundled with the package. We will walk through the basics of LowTeX here. The source for this tutorial is in `example.lt`.

@vspace

@set indent off
@begin underline
Philosophy
@end underline
@unset indent

@begin twocols

@set align center
Monospace is nice. 

Everything is scriptable.

#Readable sources.
@unset align

@end twocols

@vspace

@set indent off
@begin underline
Getting started
@end underline
@unset indent

@begin twocols

Install LowTeX with `npm install -g lowtex`. Create a new document in your favorite text editor, preferably set to a mode that wraps lines of text. To compile, use the `lowtex` command.

@vspace

A LowTeX document consists of text, with interspersed **directives**, which are prefixed with an `@`. A directive is either a **setting**, a **block**, or a **command**. Text is processed line-by-line, being wrapped and aligned according to the settings. A blank line (or directive) indicates the end of a paragraph. A line prefixed with `#` is a comment and is skipped silently.

@vspace

A setting is declared with the line `@set <name> <value>`. LowTeX mantains an internal stack of settings. To restore a setting to its previous value, use `@unset <name>`.

A block is declared with the line `@begin <name> <arguments>`, and terminated with the line `@end`. Blocks transform the text inside them. An example of a block is the **underline** block, which underlines the text inside it.

A command is simply `@<name> <arguments>`. For example, **@vspace n** adds `n` blank lines.

@end twocols

@vspace

@set indent off
@begin underline
Modules
@end underline
@set indent on

NOTE: LowTeX is now **incompatible** with the old module system implemented by @sl.

LowTeX is highly configurable. You can (and should!) write your own modules for your documents. Modules are nodejs-style. Your module exports a function, which accepts a converter instance as an argument, and modifies it somehow.

Modules are imported using the `@require <path>` syntax, where the path is relative to the current working directory.

@vspace
@begin margin 4
@set pre on
module.exports = function(converter) {
  converter.commands.banana = function() {
    this.feedLines(["Banana" + this.nspace(this.get("width") - 6)]);
  };
};
@set pre off
@end
@vspace

Converters expose the @ syntax with methods such as set(name, value), get(name), unset(name), begin_filter(name, args), and end_filter().
